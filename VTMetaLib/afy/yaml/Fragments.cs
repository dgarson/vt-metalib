using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VTMetaLib.afy.yaml
{
    public class MetaFragmentDefinition
    {
        /// <summary>
        /// Optional prefix prepended to every state generated by this Meta Fragment
        /// </summary>
        public string StateNamePrefix { get; set; } = "";

        /// <summary>
        /// The fragment file path
        /// </summary>
        public string Path { get; set; }

        /// <summary>
        /// Optional list of variables provided to the template model when importing from this fragment
        /// </summary>
        public List<FragmentVarDefinition> Vars { get; set; } = new List<FragmentVarDefinition>();

        /// <summary>
        /// If the group of states / the encapsulated logic requires meta-level variable initialization, then a state name can be provided in this
        /// field, and assuming that the top-level MetaDefinition has an `InitState` defined, this state will be called one time only when the meta
        /// starts.
        /// 
        /// NOTE:
        /// This state *MUST* eventually reach the last rule which is managed by the `InitState` generation process, which will append a file rule to
        /// the `FragmentInitState` to `SetState` to the next `InitState`
        /// </summary>
        public string FragmentInitState { get; set; } = "";

        /// <summary>
        /// optional list of named nav routes that can be referenced in any `EmbedNav` Action.
        /// </summary>
        public List<AfyNavRouteDefinition> NavRoutes { get; set; } = new List<AfyNavRouteDefinition>();
    }

    public class StateFragmentDefinition
    {
        /// <summary>
        /// Name for this fragment, referenced by the ImportFragment directive
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// The fragment file path
        /// </summary>
        public string Path { get; set; }

        /// <summary>
        /// Explicit list of section names that are inside the State Fragment and are able to be referenced in the `ImportFragment` directive.
        /// 
        /// NOTE: If no section names are provided, the Section name *MUST* be `Default` in the Fragment file, which will be validated at a later point in
        /// the reading or generation process
        /// </summary>
        public List<string> Sections { get; set; }

        /// <summary>
        /// Optional list of named variables and corresponding values that will be included in the templateable variables if no specific `Vars` entry with
        /// the same name is provided when importing the fragment in the `ImportFragment` directive
        /// </summary>
        public List<FragmentVarDefinition> DefaultVars { get; internal set; } = new List<FragmentVarDefinition>();

        /// <summary>
        /// optional list of `var` names that must be cleared if any rules generated by this fragment would transition to another state.
        /// </summary>
        public List<string> ClearVarsOnStateChange { get; internal set; } = new List<string>();

        /// <summary>
        /// optional list of `pvar` names that must be cleared if any rules generated by this fragment would transition to another state.
        /// </summary>
        public List<string> ClearPVarsOnStateChange { get; internal set; } = new List<string>();

        /// <summary>
        /// optional list of named nav routes that can be referenced in any `EmbedNav` Action.
        /// </summary>
        public List<AfyNavRouteDefinition> NavRoutes { get; set; } = new List<AfyNavRouteDefinition>();
    }

    public class FragmentVarDefinition
    {
        public string Name { get; set; }
        
        /// <summary>
        /// A basic string value
        /// </summary>
        public string Value { get; set; }

        /// <summary>
        /// Allows inline resolution of properties that would be available in a rendered Go template, but is defined at this `Vars` level within the meta
        /// rather than within the imported fragment
        /// </summary>
        public string ValueRef { get; set; }

        /// <summary>
        /// Allows inline list definition for use in templating variables.
        /// 
        /// NOTE: this is NOT to be confused with a UtilityBelt `list` object or anything that would exist in the generated `met` file itself.
        /// </summary>
        public List<string> ValueList { get; set; } 


    }
}
